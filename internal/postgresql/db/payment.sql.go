// Code generated by sqlc. DO NOT EDIT.
// source: payment.sql

package db

import (
	"context"
	"database/sql"
)

const ListPayments = `-- name: ListPayments :many
select account_id,
       case when direction = 'outgoing' then credit else debit end amount,
       from_account_id,
       to_account_id,
       direction
from public.payment_data
LIMIT $2
OFFSET $1
`

type ListPaymentsParams struct {
	Page   int32
	Number int32
}

type ListPaymentsRow struct {
	AccountID     sql.NullString
	Amount        interface{}
	FromAccountID sql.NullString
	ToAccountID   sql.NullString
	Direction     sql.NullString
}

func (q *Queries) ListPayments(ctx context.Context, arg ListPaymentsParams) ([]ListPaymentsRow, error) {
	rows, err := q.db.Query(ctx, ListPayments, arg.Page, arg.Number)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListPaymentsRow{}
	for rows.Next() {
		var i ListPaymentsRow
		if err := rows.Scan(
			&i.AccountID,
			&i.Amount,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.Direction,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListPaymentsById = `-- name: ListPaymentsById :many
select account_id,
       case when direction = 'outgoing' then credit else debit end amount,
       from_account_id,
       to_account_id,
       direction
from public.payment_data
where
    account_id = $1
LIMIT $3
OFFSET $2
`

type ListPaymentsByIdParams struct {
	Account sql.NullString
	Page    int32
	Number  int32
}

type ListPaymentsByIdRow struct {
	AccountID     sql.NullString
	Amount        interface{}
	FromAccountID sql.NullString
	ToAccountID   sql.NullString
	Direction     sql.NullString
}

func (q *Queries) ListPaymentsById(ctx context.Context, arg ListPaymentsByIdParams) ([]ListPaymentsByIdRow, error) {
	rows, err := q.db.Query(ctx, ListPaymentsById, arg.Account, arg.Page, arg.Number)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListPaymentsByIdRow{}
	for rows.Next() {
		var i ListPaymentsByIdRow
		if err := rows.Scan(
			&i.AccountID,
			&i.Amount,
			&i.FromAccountID,
			&i.ToAccountID,
			&i.Direction,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
